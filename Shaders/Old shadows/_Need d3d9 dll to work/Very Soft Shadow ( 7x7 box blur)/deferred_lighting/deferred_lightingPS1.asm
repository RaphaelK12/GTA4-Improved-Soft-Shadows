// Soft shadow with 16 samples to make 3x3 bilinear blur (need d3d9 wrapper to correct shadow resolution)
// Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
//
// Parameters:
//
//   sampler2D GBufferTextureSampler0
//   sampler2D GBufferTextureSampler1
//   sampler2D GBufferTextureSampler2
//   sampler2D GBufferTextureSampler3
//   sampler2D ParabSampler
//   float4 dReflectionParams
//   float4 gDeferredProjParams
//   float4 gDirectionalColour
//   float4 gDirectionalLight
//   float4 gFacetCentre
//   float4 gLightAmbient0
//   float4 gLightAmbient1
//   row_major float4x4 gShadowMatrix
//   float4 gShadowParam0123
//   float4 gShadowParam14151617
//   float4 gShadowParam18192021
//   float4 gShadowParam4567
//   float4 gShadowParam891113
//   sampler2D gShadowZSamplerDir
//   row_major float4x4 gViewInverse
//   float4 globalScalars
//
//
// Registers:
//
//   Name                   Reg   Size
//   ---------------------- ----- ----
//   gViewInverse           c12      4
//   gDirectionalLight      c17      1
//   gDirectionalColour     c18      1
//   gLightAmbient0         c37      1
//   gLightAmbient1         c38      1
//   globalScalars          c39      1
//   gShadowParam18192021   c53      1
//   gFacetCentre           c54      1
//   gShadowParam14151617   c56      1
//   gShadowParam0123       c57      1
//   gShadowParam4567       c58      1
//   gShadowParam891113     c59      1
//   gShadowMatrix          c60      4
//   gDeferredProjParams    c66      1
//   dReflectionParams      c72      1
//   GBufferTextureSampler0 s0       1
//   GBufferTextureSampler1 s1       1
//   GBufferTextureSampler2 s2       1
//   GBufferTextureSampler3 s4       1
//   ParabSampler           s5       1
//   gShadowZSamplerDir     s15      1
//

    ps_3_0
    def c0, 512, 0.99609375, 7.96875, 63.75
	def c1, 0.25, 256, -127.999992, 9.99999975e-006
    def c2, 1.33333337, 9.99999975e-005, 512, 1
    def c3, 1, 0, 1.5, 0.0204081632653 		//  1/25 samples
    def c4, -0.5, 0.5, 0.0199999996, 0.00999999978
    def c5, 4, 0.75, 0.25, 5
    def c6, 10, 0, 0, 0
    def c7, 1, -1, 0, -0

	// poison disk rescaled x
    def c8,  -0.08048500125, -0.932614982, -0.19788974525, -0.597710013
    def c9,   0.12685774275,  0.064424999,  0.22410500050,  0.412458003
    def c10,  0.12986400725,  0.767022014,  0.04636525000, -0.893123984
    def c11,  0.24058499925, -0.194983006,  0.11835850025, -0.480026007
    def c12, -0.17397849250,  0.457136989, -0.05083625025,  0.620715976
    def c13, -0.08155299725, -0.405809999, -0.21003599475, -0.073579997

	// added this
	
	
	
	
	// constantes 9x9
	// def c96,  -4, -3, -2, -1 
	// def c97,  -4, -3,  0,  1 
	// def c98,  -4, -3,  2,  3 
	// def c99,  -4, -3,  4,  5 
	// def c100, -2, -1,  0,  1 
	// def c101, -2, -1,  2,  3 
	// def c102, -2, -1,  4,  5 
	// def c103,  0,  1,  2,  3 
	// def c104,  0,  1,  4,  5 
	// def c105,  2,  3,  4,  5 
	// def c106, -4, -3, -2, -1 
	// def c107,  0,  1,  2,  3

	// posição das amostras 
	// c96.xx  c96.yx  c96.zx   c96.wx   c97.zx   c97.wx   c98.zx   c98.wx   c99.zx   c99.wx 
	// c96.xy  c96.yy  c96.zy   c96.wy   c97.zy   c97.wy   c98.zy   c98.wy   c99.zy   c99.wy 
	// c96.xz  c96.yz  c96.zz   c96.wz   c100.zx  c100.wx  c101.zx  c101.wx  c102.zx  c102.wx 
	// c96.xw  c96.yw  c96.zw   c96.ww   c100.zy  c100.wy  c101.zy  c101.wy  c102.zy  c102.wy 
	// c97.xz  c97.yz  c104.xz  c104.yz  c106.zz  c106.wz  c107.zx  c107.wx  c103.zx  c103.wx 
	// c97.xw  c97.yw  c104.xw  c104.yw  c106.zw  c106.ww  c107.zy  c107.wy  c103.zy  c103.wy
	// c98.xz  c98.yz  c105.xz  c105.yz  c107.xz  c107.yz  c103.xz  c103.yz  c105.zx  c105.wx 
	// c98.xw  c98.yw  c105.xw  c105.yw  c107.xw  c107.yw  c103.xw  c103.yw  c105.zy  c105.wy 
	// c99.xz  c99.yz  c102.xz  c102.yz  c104.zx  c104.wx  c101.zx  c101.wx  c102.zx  c102.wx 
	// c99.xw  c99.yw  c102.xw  c102.yw  c104.zy  c104.wy  c101.zy  c101.wy  c102.zy  c102.wy	
	
	
	
	
	//  7x7    x   y  z  w
	def c101, -3, -2,-1, 0 	// pixels offsets
	def c102, -3, -2, 1, 2 	// pixels offsets
	def c103, -3, -2, 3, 4 	// pixels offsets
	def c104, -1,  0, 1, 2 	// pixels offsets
	def c105, -1,  0, 3, 4 	// pixels offsets
	def c106,  1,  2, 3, 4 	// pixels offsets
	//      -3       -2        -1       0        1        2        3        4      
	// -3   c101.xx  c101.yx   c101.zx  c101.wx  c102.zx  c102.wx  c103.zx  c103.wx 
	// -2   c101.xy  c101.yy   c101.zy  c101.wy  c102.zy  c102.wy  c102.zy  c103.wy 
	// -1   c101.xz  c101.yz   c101.zz  c101.wz  c104.zx  c104.wx  c105.zx  c105.wx 
	//  0   c101.xw  c101.yw   c101.zw  c101.ww  c105.zy  c105.wy  c106.zy  c106.wy 
	//  1   c102.xz  c102.yz   c104.xz  c104.yz  c102.zz  c102.wz  c106.zx  c106.wx 
	//  2   c102.xw  c102.yw   c104.xw  c104.yw  c104.zw  c104.ww  c106.zy  c106.wy 
	//  3   c103.xz  c103.yz   c105.xz  c105.yz  c106.xz  c106.yz  c106.zz  c106.wz 
	//  4   c103.xw  c103.yw   c105.xw  c105.yw  c106.xw  c106.yw  c106.zw  c106.ww 
	//                                              
	
	//  5x5
	def c96, -2, -1, 0, 1 	// pixels offsets
	def c97, -2, -1, 2, 3 	// pixels offsets
	def c98,  0,  1, 2, 3 	// pixels offsets
    def c99,  0.125, 0.5, 0.25, 1 // texture rescale multiplicator (the shader is made to work with a square texture, but provides a 4x larger in horizontal)
	//   -2 -1  0  1  2  3
	
	//     -2-2,  -1-2,   0-2,   1-2,   2-2,   3-2
	//   c96.xx c96.yx c96.zx c96.wx c97.zx c97.wx
	
	//     -2-1,  -1-1,   0-1,   1-1,   2-1,   3-1
	//   c96.xy c96.yy c96.zy c96.wy c97.zy c97.wy
	
	//     -2 0,  -1 0,   0 0,   1 0,   2 0,   3 0
	//   c96.xz c96.yz c96.zz c96.wz c98.zx c98.wx
	
	//     -2 1,  -1 1,   0 1,   1 1,   2 1,   3 1
	//   c96.xw c96.yw c96.zw c96.ww c98.zy c98.wy
	
	//     -2 2,  -1 2,   0 2,   1 2,   2 2,   3 2
	//   c97.xz c97.yz c98.xz c98.yz c98.zz c98.wz
	
	//     -2 3,  -1 3,   0 3,   1 3,   2 3,   3 3
	//   c97.xw c97.yw c98.xw c98.yw c98.zw c98.ww
	//






    dcl_texcoord v0.xy
    dcl_texcoord1 v1
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s4
    dcl_2d s5
    dcl_2d s15
    texld r0, v0, s4
    mad r0.x, r0.x, c66.z, -c66.w
    mul r0.x, r0.x, v1.w
    rcp r0.x, r0.x
    mad r0.yzw, v1.xxyz, -r0.x, c15.xxyz
    dp3 r1.x, c14, r0.yzww
    add r1.xyz, -r1.x, -c54
    cmp r1.yzw, r1.xxyz, c3.x, c3.y
    mov r1.x, c2.w
    dp4 r2.x, r1, c57
    dp4 r2.y, r1, c58
    dp4 r3.x, r1, c59
    dp4 r3.y, r1, c56
    mul r1.xyz, r0.z, c61.xyww
    mad r1.xyz, r0.y, c60.xyww, r1
    mad r1.xyz, r0.w, c62.xyww, r1
    add r0.yzw, -r0, c15.xxyz
    dp3 r0.y, r0.yzww, r0.yzww
    rsq r0.y, r0.y
    rcp r0.y, r0.y
    add r1.xyz, r1, c63.xyww
    mad r0.zw, r1.xyxy, r2.xyxy, r3.xyxy
    mov r1.y, c53.y					// 1/texture height

	mul r1.xy, r1.yy, c99.xy 		// rescale pixel width (texture is 4x larger horizontal)
	mov r2.zw, c7.zz				// r2.zw = zero (avoid trouble on sampling)

	// r0.zw = is shadow UV
	// r1.xy = scale of one pixel = 1/float2(texture.width, texture.height)
	// c96 = offsets to sample (-1 pixel to +2 pixel)

	// 5x5
	// c96.xx
	// c96.yx
	// c96.zx
	// c96.wx
	// c97.zx
	// c97.wx

	// c96.xy
	// c96.yy
	// c96.zy
	// c96.wy
	// c97.zy
	// c97.wy

	// c96.xz
	// c96.yz
	// c96.zz
	// c96.wz
	// c98.zx
	// c98.wx

	// c96.xw
	// c96.yw
	// c96.zw
	// c96.ww
	// c98.zy
	// c98.wy

	// c97.xz
	// c97.yz
	// c98.xz
	// c98.yz
	// c98.zz
	// c98.wz

	// c97.xw
	// c97.yw
	// c98.xw
	// c98.yw
	// c98.zw
	// c98.ww






	// 7x7
	// c101.xx
	// c101.yx
	// c101.zx
	// c101.wx
	// c102.zx
	// c102.wx
	// c103.zx
	// c103.wx

	// c101.xy
	// c101.yy
	// c101.zy
	// c101.wy
	// c102.zy
	// c102.wy
	// c102.zy
	// c103.wy

	// c101.xz
	// c101.yz
	// c101.zz
	// c101.wz
	// c104.zx
	// c104.wx
	// c105.zx
	// c105.wx

	// c101.xw
	// c101.yw
	// c101.zw
	// c101.ww
	// c105.zy
	// c105.wy
	// c106.zy
	// c106.wy

	// c102.xz
	// c102.yz
	// c104.xz
	// c104.yz
	// c102.zz
	// c102.wz
	// c106.zx
	// c106.wx

	// c102.xw
	// c102.yw
	// c104.xw
	// c104.yw
	// c104.zw
	// c104.ww
	// c106.zy
	// c106.wy

	// c103.xz
	// c103.yz
	// c105.xz
	// c105.yz
	// c106.xz
	// c106.yz
	// c106.zz
	// c106.wz

	// c103.xw
	// c103.yw
	// c105.xw
	// c105.yw
	// c106.xw
	// c106.yw
	// c106.zw
	// c106.ww



	// 9x9    
	// c96.xx 
	// c96.yx 
	// c96.zx 
	// c96.wx 
	// c97.zx 
	// c97.wx 
	// c98.zx 
	// c98.wx 
	// c99.zx 
	// c99.wx 
			  
	// c96.xy 
	// c96.yy 
	// c96.zy 
	// c96.wy 
	// c97.zy 
	// c97.wy 
	// c98.zy 
	// c98.wy 
	// c99.zy 
	// c99.wy 
			  
	// c96.xz 
	// c96.yz 
	// c96.zz 
	// c96.wz 
	// c100.zx
	// c100.wx
	// c101.zx
	// c101.wx
	// c102.zx
	// c102.wx
			  
	// c96.xw 
	// c96.yw 
	// c96.zw 
	// c96.ww 
	// c100.zy
	// c100.wy
	// c101.zy
	// c101.wy
	// c102.zy
	// c102.wy
			  
	// c97.xz 
	// c97.yz 
	// c104.xz
	// c104.yz
	// c106.zz
	// c106.wz
	// c107.zx
	// c107.wx
	// c103.zx
	// c103.wx
			  
	// c97.xw 
	// c97.yw 
	// c104.xw
	// c104.yw
	// c106.zw
	// c106.ww
	// c107.zy
	// c107.wy
	// c103.zy
	// c103.wy
			  
	// c98.xz 
	// c98.yz 
	// c105.xz
	// c105.yz
	// c107.xz
	// c107.yz
	// c103.xz
	// c103.yz
	// c105.zx
	// c105.wx
			  
	// c98.xw 
	// c98.yw 
	// c105.xw
	// c105.yw
	// c107.xw
	// c107.yw
	// c103.xw
	// c103.yw
	// c105.zy
	// c105.wy
			  
	// c99.xz 
	// c99.yz 
	// c102.xz
	// c102.yz
	// c104.zx
	// c104.wx
	// c101.zx
	// c101.wx
	// c102.zx
	// c102.wx
			  
	// c99.xw 
	// c99.yw 
	// c102.xw
	// c102.yw
	// c104.zy
	// c104.wy
	// c101.zy
	// c101.wy
	// c102.zy
	// c102.wy
	
	




	// invert to texture size (1/pixel size)
	rcp r7.x, r1.x
	rcp r7.y, r1.y
		 
	mul r7.xy, r0.zw, r7.xy		// uv * texture size(2048x512)
	frc r7.xy, r7.xy			// fractional part
	add r7.xy, c7.xx, -r7.xy	// 1 - fractional part


	// 64 shadow samples (r10 to r13, each is a row)
	// first row (r3 takes shadow samples, x = colum 1, y = colum 2, etc.)
	mad r2.xy, c101.xx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.x, r1.z, -r8.x;
	cmp r10.x, r10.x, c3.x, c3.y;

	mad r2.xy, c101.yx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.y, r1.z, -r8.x;
	cmp r10.y, r10.y, c3.x, c3.y;

	mad r2.xy, c101.zx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.z, r1.z, -r8.x;
	cmp r10.z, r10.z, c3.x, c3.y;

	mad r2.xy, c101.wx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.w, r1.z, -r8.x;
	cmp r10.w, r10.w, c3.x, c3.y;

	mad r2.xy, c102.zx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.x, r1.z, -r8.x;
	cmp r11.x, r11.x, c3.x, c3.y;

	mad r2.xy, c102.wx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.y, r1.z, -r8.x;
	cmp r11.y, r11.y, c3.x, c3.y;

	mad r2.xy, c103.zx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.z, r1.z, -r8.x;
	cmp r11.z, r11.z, c3.x, c3.y;

	mad r2.xy, c103.wx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.w, r1.z, -r8.x;
	cmp r11.w, r11.w, c3.x, c3.y

	// 2 row
	mad r2.xy, c101.xy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.x, r1.z, -r8.x;
	cmp r12.x, r12.x, c3.x, c3.y;

	mad r2.xy, c101.yy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.y, r1.z, -r8.x;
	cmp r12.y, r12.y, c3.x, c3.y;

	mad r2.xy, c101.zy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.z, r1.z, -r8.x;
	cmp r12.z, r12.z, c3.x, c3.y;

	mad r2.xy, c101.wy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.w, r1.z, -r8.x;
	cmp r12.w, r12.w, c3.x, c3.y;

	mad r2.xy, c102.zy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.x, r1.z, -r8.x;
	cmp r13.x, r13.x, c3.x, c3.y;

	mad r2.xy, c102.wy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.y, r1.z, -r8.x;
	cmp r13.y, r13.y, c3.x, c3.y;

	mad r2.xy, c102.zy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.z, r1.z, -r8.x;
	cmp r13.z, r13.z, c3.x, c3.y;

	mad r2.xy, c103.wy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.w, r1.z, -r8.x;
	cmp r13.w, r13.w, c3.x, c3.y

	lrp r20,   r7.y, r10, r12
	lrp r21,   r7.y, r11, r13
	lrp r6.w, r7.x, r20.x, r20.y;


	lrp r6.z, r7.x, r20.y, r20.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.z, r20.w;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.w, r21.x;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.x, r21.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.y, r21.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.z, r21.w;
	add r6.w, r6.w, r6.z

	// 3	
	mad r2.xy, c101.xz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.x, r1.z, -r8.x;
	cmp r10.x, r10.x, c3.x, c3.y;

	mad r2.xy, c101.yz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.y, r1.z, -r8.x;
	cmp r10.y, r10.y, c3.x, c3.y;

	mad r2.xy, c101.zz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.z, r1.z, -r8.x;
	cmp r10.z, r10.z, c3.x, c3.y;

	mad r2.xy, c101.wz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.w, r1.z, -r8.x;
	cmp r10.w, r10.w, c3.x, c3.y;

	mad r2.xy, c104.zx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.x, r1.z, -r8.x;
	cmp r11.x, r11.x, c3.x, c3.y;

	mad r2.xy, c104.wx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.y, r1.z, -r8.x;
	cmp r11.y, r11.y, c3.x, c3.y;

	mad r2.xy, c105.zx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.z, r1.z, -r8.x;
	cmp r11.z, r11.z, c3.x, c3.y;

	mad r2.xy, c105.wx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.w, r1.z, -r8.x;
	cmp r11.w, r11.w, c3.x, c3.y

	lrp r20,   r7.y, r12, r10
	lrp r21,   r7.y, r13, r11
	lrp r6.z, r7.x, r20.x, r20.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.y, r20.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.z, r20.w;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.w, r21.x;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.x, r21.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.y, r21.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.z, r21.w;
	add r6.w, r6.w, r6.z

	// 4
	mad r2.xy, c101.xw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.x, r1.z, -r8.x;
	cmp r12.x, r12.x, c3.x, c3.y;

	mad r2.xy, c101.yw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.y, r1.z, -r8.x;
	cmp r12.y, r12.y, c3.x, c3.y;

	mad r2.xy, c101.zw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.z, r1.z, -r8.x;
	cmp r12.z, r12.z, c3.x, c3.y;

	mad r2.xy, c101.ww, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.w, r1.z, -r8.x;
	cmp r12.w, r12.w, c3.x, c3.y;

	mad r2.xy, c105.zy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.x, r1.z, -r8.x;
	cmp r13.x, r13.x, c3.x, c3.y;

	mad r2.xy, c105.wy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.y, r1.z, -r8.x;
	cmp r13.y, r13.y, c3.x, c3.y;

	mad r2.xy, c106.zy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.z, r1.z, -r8.x;
	cmp r13.z, r13.z, c3.x, c3.y;

	mad r2.xy, c106.wy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.w, r1.z, -r8.x;
	cmp r13.w, r13.w, c3.x, c3.y

	lrp r20,   r7.y, r10, r12
	lrp r21,   r7.y, r11, r13
	lrp r6.z, r7.x, r20.x, r20.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.y, r20.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.z, r20.w;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.w, r21.x;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.x, r21.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.y, r21.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.z, r21.w;
	add r6.w, r6.w, r6.z

	// 5
	mad r2.xy, c102.xz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.x, r1.z, -r8.x;
	cmp r10.x, r10.x, c3.x, c3.y;

	mad r2.xy, c102.yz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.y, r1.z, -r8.x;
	cmp r10.y, r10.y, c3.x, c3.y;

	mad r2.xy, c104.xz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.z, r1.z, -r8.x;
	cmp r10.z, r10.z, c3.x, c3.y;

	mad r2.xy, c104.yz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.w, r1.z, -r8.x;
	cmp r10.w, r10.w, c3.x, c3.y;

	mad r2.xy, c102.zz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.x, r1.z, -r8.x;
	cmp r11.x, r11.x, c3.x, c3.y;

	mad r2.xy, c102.wz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.y, r1.z, -r8.x;
	cmp r11.y, r11.y, c3.x, c3.y;

	mad r2.xy, c106.zx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.z, r1.z, -r8.x;
	cmp r11.z, r11.z, c3.x, c3.y;

	mad r2.xy, c106.wx, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.w, r1.z, -r8.x;
	cmp r11.w, r11.w, c3.x, c3.y	

	lrp r20,   r7.y, r12, r10
	lrp r21,   r7.y, r13, r11
	lrp r6.z, r7.x, r20.x, r20.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.y, r20.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.z, r20.w;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.w, r21.x;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.x, r21.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.y, r21.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.z, r21.w;
	add r6.w, r6.w, r6.z

	// 6
	mad r2.xy, c102.xw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.x, r1.z, -r8.x;
	cmp r12.x, r12.x, c3.x, c3.y;

	mad r2.xy, c102.yw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.y, r1.z, -r8.x;
	cmp r12.y, r12.y, c3.x, c3.y;

	mad r2.xy, c104.xw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.z, r1.z, -r8.x;
	cmp r12.z, r12.z, c3.x, c3.y;

	mad r2.xy, c104.yw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.w, r1.z, -r8.x;
	cmp r12.w, r12.w, c3.x, c3.y;

	mad r2.xy, c104.zw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.x, r1.z, -r8.x;
	cmp r13.x, r13.x, c3.x, c3.y;

	mad r2.xy, c104.ww, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.y, r1.z, -r8.x;
	cmp r13.y, r13.y, c3.x, c3.y;

	mad r2.xy, c106.zy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.z, r1.z, -r8.x;
	cmp r13.z, r13.z, c3.x, c3.y;

	mad r2.xy, c106.wy, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.w, r1.z, -r8.x;
	cmp r13.w, r13.w, c3.x, c3.y

	lrp r20,   r7.y, r10, r12
	lrp r21,   r7.y, r11, r13
	lrp r6.z, r7.x, r20.x, r20.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.y, r20.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.z, r20.w;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.w, r21.x;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.x, r21.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.y, r21.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.z, r21.w;
	add r6.w, r6.w, r6.z

	// 7
	mad r2.xy, c103.xz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.x, r1.z, -r8.x;
	cmp r10.x, r10.x, c3.x, c3.y;

	mad r2.xy, c103.yz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.y, r1.z, -r8.x;
	cmp r10.y, r10.y, c3.x, c3.y;

	mad r2.xy, c105.xz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.z, r1.z, -r8.x;
	cmp r10.z, r10.z, c3.x, c3.y;

	mad r2.xy, c105.yz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r10.w, r1.z, -r8.x;
	cmp r10.w, r10.w, c3.x, c3.y;

	mad r2.xy, c106.xz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.x, r1.z, -r8.x;
	cmp r11.x, r11.x, c3.x, c3.y;

	mad r2.xy, c106.yz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.y, r1.z, -r8.x;
	cmp r11.y, r11.y, c3.x, c3.y;

	mad r2.xy, c106.zz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.z, r1.z, -r8.x;
	cmp r11.z, r11.z, c3.x, c3.y;

	mad r2.xy, c106.wz, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r11.w, r1.z, -r8.x;
	cmp r11.w, r11.w, c3.x, c3.y	

	lrp r20,   r7.y, r12, r10
	lrp r21,   r7.y, r13, r11
	lrp r6.z, r7.x, r20.x, r20.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.y, r20.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.z, r20.w;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.w, r21.x;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.x, r21.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.y, r21.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.z, r21.w;
	add r6.w, r6.w, r6.z

	// 8
	mad r2.xy, c103.xw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.x, r1.z, -r8.x;
	cmp r12.x, r12.x, c3.x, c3.y;

	mad r2.xy, c103.yw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.y, r1.z, -r8.x;
	cmp r12.y, r12.y, c3.x, c3.y;

	mad r2.xy, c105.xw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.z, r1.z, -r8.x;
	cmp r12.z, r12.z, c3.x, c3.y;

	mad r2.xy, c105.yw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r12.w, r1.z, -r8.x;
	cmp r12.w, r12.w, c3.x, c3.y;

	mad r2.xy, c106.xw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.x, r1.z, -r8.x;
	cmp r13.x, r13.x, c3.x, c3.y;

	mad r2.xy, c106.yw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.y, r1.z, -r8.x;
	cmp r13.y, r13.y, c3.x, c3.y;

	mad r2.xy, c106.zw, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.z, r1.z, -r8.x;
	cmp r13.z, r13.z, c3.x, c3.y;

	mad r2.xy, c106.ww, r1.xy, r0.zw;
	texld r8, r2.xy, s15;
	add r13.w, r1.z, -r8.x;
	cmp r13.w, r13.w, c3.x, c3.y

	lrp r20,   r7.y, r10, r12
	lrp r21,   r7.y, r11, r13
	lrp r6.z, r7.x, r20.x, r20.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.y, r20.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.z, r20.w;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r20.w, r21.x;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.x, r21.y;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.y, r21.z;
	add r6.w, r6.w, r6.z;

	lrp r6.z, r7.x, r21.z, r21.w;
	add r0.z, r6.w, r6.z


	// r0.z takes final shadows result
    rcp r0.w, c53.w
    mul r0.w, r0.y, r0.w
    add r0.y, r0.y, -c53.w
    cmp r1.xy, r0.y, c7, c7.zwzw
    mul r0.y, r0.w, r0.w
    mul r0.y, r0.y, c3.z
    mad r0.y, r0.z, c3.w, r0.y
    add r0.z, r1.y, r0.y
    cmp_sat r0.y, r0.z, r0.y, r1.x
    texld r1, v0, s1
    mul r2.xyz, r1.w, c0.yzww
    frc r2.xyz, r2
    add r3.xyz, r2, r2
    mad r3.xy, r2.yzzw, -c1.x, r3
    mad r1.xyz, r1, c1.y, r3
    add r1.xyz, r1, c1.z
    nrm r2.xyz, r1
    mad r1.xyz, v1, -r0.x, c1.w
    mul r0.xzw, r0.x, v1.xyyz
    nrm r3.xyz, r1
    dp3 r1.x, r3, r2
    add r1.y, r1.x, r1.x
    add r1.x, -r1_abs.x, c2.w
    mul r1.x, r1.x, r1.x
    mul r1.x, r1.x, r1.x
    mad r1.x, r1.x, c5.y, c5.z
    mad r1.yzw, r2.xxyz, -r1.y, r3.xxyz
    dp3_sat r2.w, -c17, r1.yzww
    add r2.w, r2.w, c2.y
    texld r4, v0, s2
    mul r3.w, r4.y, r4.y
    mad r4.y, r3.w, c2.z, c2.y
    mul r3.w, r3.w, c0.x
    mul_sat r3.w, r3.w, c72.x
    mad r5.w, r3.w, -c5.x, c5.x
    pow r3.w, r2.w, r4.y
    mul r6.xyz, c18.w, c18
    mul r7.xyz, r3.w, r6
    mul r7.xyz, r0.y, r7
    dp3 r0.x, r3, -r0.xzww
    mul_sat r0.xz, r0.x, c4.zyww
    mad r1.yzw, r3.xxyz, r0.x, r1
    add r0.x, -r0.z, c2.w
    add r1.yzw, r1, c1.w
    nrm r3.xyz, r1.yzww
    mul_sat r0.z, r3.z, c5.w
    mov_sat r0.w, r3.z
    add r0.w, r0.w, c2.w
    add r0.w, r0.w, r0.w
    rcp r0.w, r0.w
    mad r1.yz, r3.xxyw, r0.w, c4.y
    add r5.xy, -r1.yzzw, c2.w
    mov r5.z, c3.y
    texldl r3, r5, s5
    mul r1.yzw, r0.z, r3.xxyz
    mul r0.xzw, r0.x, r1.yyzw
    mul r0.xzw, r4.z, r0
    mul r0.xzw, r0, c39.w
    mul r0.xzw, r1.x, r0
    mul r0.xzw, r0, c6.x
    add r1.x, c17.w, c17.w
    mad r0.xzw, r7.xyyz, r1.x, r0
    add r1.x, r4.x, r4.x
    mul r0.xzw, r0, r1.x
    dp3 r1.x, r2, -c17
    mad_sat r1.y, r2.z, c4.x, c4.y
    mov r2.xyz, c38
    mad r1.yzw, r2.xxyz, r1.y, c37.xxyz
    mul r1.yzw, r4.z, r1
    add r1.x, r1.x, -c1.x
    mul_sat r1.x, r1.x, c2.x
    mul r2.xyz, r6, r1.x
    mad r1.xyz, r2, r0.y, r1.yzww
    texld r2, v0, s0
    mad oC0.xyz, r2, r1, r0.xzww
    mov oC0.w, c2.w

// approximately 167 instruction slots used (18 texture, 149 arithmetic)

